<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ output extension=".cs" #>
<#
    void Process(string xmlFile) {
    	var root = XDocument.Load(this.Host.ResolvePath(xmlFile)).Root;
#>
// This is an auto generated source code with Text Template Transformation Toolkit.

using OpenKh.Common.Utils;

<#
        Walk(root);
    }

    void Walk(XElement parent) {
        foreach (var openNamespace in parent.Elements("OpenNamespace")) {
            string Attr(string key) => openNamespace.Attribute(key)?.Value;
#>
namespace <#= Attr("Name") #>
{
<#          PushIndent("    "); Walk(openNamespace); PopIndent(); #>
}

<#
        }

        foreach (var openClass in parent.Elements("OpenClass")) {
            string Attr(string key) => openClass.Attribute(key)?.Value;
#>
public <#= (Attr("Partial") == "1") ? "partial" : "" #> class <#= Attr("Name") #>
{
<#          PushIndent("    "); Walk(openClass); PopIndent(); #>
}

<#
        }
        foreach (var field in parent.Elements("IntBitsField")) {
            string Attr(string key) => field.Attribute(key)?.Value;
#>
public <#= Attr("NewType") #> <#= Attr("NewName") #>
{
    get => (<#= Attr("NewType") #>)BitsUtil.Int.GetBits(<#= Attr("SourceName") #>, <#= Attr("Position") #>, <#= Attr("Size") #>);
    set => <#= Attr("SourceName") #> = (<#= Attr("SourceType") #>)BitsUtil.Int.SetBits((int)<#= Attr("SourceName") #>, <#= Attr("Position") #>, <#= Attr("Size") #>, (int)value);
}

<#
        }
        foreach (var field in parent.Elements("IntBitField")) {
            string Attr(string key) => field.Attribute(key)?.Value;
#>
public bool <#= Attr("NewName") #>
{
    get => BitsUtil.Int.GetBit(<#= Attr("SourceName") #>, <#= Attr("Position") #>);
    set => <#= Attr("SourceName") #> = (<#= Attr("SourceType") #>)BitsUtil.Int.SetBit((int)<#= Attr("SourceName") #>, <#= Attr("Position") #>, value);
}

<#
        }
    }
#>
