//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from BdxScript.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class BdxScriptParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, StringData=14, DEC=15, HEX=16, 
		FLOATNUM=17, ID=18, WS=19, NL=20, FileName=21, LINE_COMMENT=22;
	public const int
		RULE_prog = 0, RULE_statement = 1, RULE_label = 2, RULE_equ = 3, RULE_order = 4, 
		RULE_dw = 5, RULE_db = 6, RULE_resb = 7, RULE_resw = 8, RULE_instruction = 9, 
		RULE_arg = 10, RULE_offset = 11, RULE_bytedata = 12, RULE_worddata = 13, 
		RULE_numberdata = 14, RULE_hexbody = 15, RULE_id = 16, RULE_include = 17, 
		RULE_section = 18, RULE_section_id = 19;
	public static readonly string[] ruleNames = {
		"prog", "statement", "label", "equ", "order", "dw", "db", "resb", "resw", 
		"instruction", "arg", "offset", "bytedata", "worddata", "numberdata", 
		"hexbody", "id", "include", "section", "section_id"
	};

	private static readonly string[] _LiteralNames = {
		null, "':'", "'equ'", "'dw'", "','", "'db'", "'resb'", "'resw'", "'offset'", 
		"'0x'", "'%include'", "'section'", "'.text'", "'.bss'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "StringData", "DEC", "HEX", "FLOATNUM", "ID", "WS", "NL", 
		"FileName", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BdxScript.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BdxScriptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BdxScriptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BdxScriptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(BdxScriptParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(BdxScriptParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(BdxScriptParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 40;
				Match(NL);
				}
				}
				State = 45;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 55;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 363752L) != 0) {
				{
				{
				State = 46;
				statement();
				State = 50;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 47;
					Match(NL);
					}
					}
					State = 52;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 57;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 58;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SectionContext section() {
			return GetRuleContext<SectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EquContext equ() {
			return GetRuleContext<EquContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(BdxScriptParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OrderContext order() {
			return GetRuleContext<OrderContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 71;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 60;
				section();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 61;
				equ();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 62;
				label();
				State = 63;
				Match(T__0);
				State = 64;
				Match(NL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 66;
				label();
				State = 67;
				Match(T__0);
				State = 68;
				order();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 70;
				order();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		public IdContext name;
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 4, RULE_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			_localctx.name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EquContext : ParserRuleContext {
		public IdContext name;
		[System.Diagnostics.DebuggerNonUserCode] public NumberdataContext numberdata() {
			return GetRuleContext<NumberdataContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public EquContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equ; } }
	}

	[RuleVersion(0)]
	public EquContext equ() {
		EquContext _localctx = new EquContext(Context, State);
		EnterRule(_localctx, 6, RULE_equ);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			_localctx.name = id();
			State = 76;
			Match(T__1);
			State = 77;
			numberdata();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DbContext db() {
			return GetRuleContext<DbContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResbContext resb() {
			return GetRuleContext<ResbContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DwContext dw() {
			return GetRuleContext<DwContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReswContext resw() {
			return GetRuleContext<ReswContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncludeContext include() {
			return GetRuleContext<IncludeContext>(0);
		}
		public OrderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order; } }
	}

	[RuleVersion(0)]
	public OrderContext order() {
		OrderContext _localctx = new OrderContext(Context, State);
		EnterRule(_localctx, 8, RULE_order);
		try {
			State = 85;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
				EnterOuterAlt(_localctx, 1);
				{
				State = 79;
				db();
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 2);
				{
				State = 80;
				resb();
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 3);
				{
				State = 81;
				dw();
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 4);
				{
				State = 82;
				resw();
				}
				break;
			case DEC:
			case HEX:
			case ID:
				EnterOuterAlt(_localctx, 5);
				{
				State = 83;
				instruction();
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 6);
				{
				State = 84;
				include();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DwContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WorddataContext[] worddata() {
			return GetRuleContexts<WorddataContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WorddataContext worddata(int i) {
			return GetRuleContext<WorddataContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(BdxScriptParser.NL, 0); }
		public DwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dw; } }
	}

	[RuleVersion(0)]
	public DwContext dw() {
		DwContext _localctx = new DwContext(Context, State);
		EnterRule(_localctx, 10, RULE_dw);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			Match(T__2);
			State = 88;
			worddata();
			State = 93;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 89;
				Match(T__3);
				State = 90;
				worddata();
				}
				}
				State = 95;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 96;
			Match(NL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DbContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BytedataContext[] bytedata() {
			return GetRuleContexts<BytedataContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BytedataContext bytedata(int i) {
			return GetRuleContext<BytedataContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(BdxScriptParser.NL, 0); }
		public DbContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_db; } }
	}

	[RuleVersion(0)]
	public DbContext db() {
		DbContext _localctx = new DbContext(Context, State);
		EnterRule(_localctx, 12, RULE_db);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			Match(T__4);
			State = 99;
			bytedata();
			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 100;
				Match(T__3);
				State = 101;
				bytedata();
				}
				}
				State = 106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 107;
			Match(NL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResbContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(BdxScriptParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberdataContext numberdata() {
			return GetRuleContext<NumberdataContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ResbContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resb; } }
	}

	[RuleVersion(0)]
	public ResbContext resb() {
		ResbContext _localctx = new ResbContext(Context, State);
		EnterRule(_localctx, 14, RULE_resb);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			Match(T__5);
			State = 112;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 110;
				numberdata();
				}
				break;
			case 2:
				{
				State = 111;
				id();
				}
				break;
			}
			State = 114;
			Match(NL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReswContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(BdxScriptParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberdataContext numberdata() {
			return GetRuleContext<NumberdataContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ReswContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resw; } }
	}

	[RuleVersion(0)]
	public ReswContext resw() {
		ReswContext _localctx = new ReswContext(Context, State);
		EnterRule(_localctx, 16, RULE_resw);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			Match(T__6);
			State = 119;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 117;
				numberdata();
				}
				break;
			case 2:
				{
				State = 118;
				id();
				}
				break;
			}
			State = 121;
			Match(NL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(BdxScriptParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgContext[] arg() {
			return GetRuleContexts<ArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgContext arg(int i) {
			return GetRuleContext<ArgContext>(i);
		}
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		InstructionContext _localctx = new InstructionContext(Context, State);
		EnterRule(_localctx, 18, RULE_instruction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			id();
			State = 132;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 492032L) != 0) {
				{
				State = 124;
				arg();
				State = 129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 125;
					Match(T__3);
					State = 126;
					arg();
					}
					}
					State = 131;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 134;
			Match(NL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberdataContext numberdata() {
			return GetRuleContext<NumberdataContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg; } }
	}

	[RuleVersion(0)]
	public ArgContext arg() {
		ArgContext _localctx = new ArgContext(Context, State);
		EnterRule(_localctx, 20, RULE_arg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 136;
				numberdata();
				}
				break;
			case 2:
				{
				State = 137;
				id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OffsetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public OffsetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_offset; } }
	}

	[RuleVersion(0)]
	public OffsetContext offset() {
		OffsetContext _localctx = new OffsetContext(Context, State);
		EnterRule(_localctx, 22, RULE_offset);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			Match(T__7);
			State = 141;
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BytedataContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberdataContext numberdata() {
			return GetRuleContext<NumberdataContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringData() { return GetToken(BdxScriptParser.StringData, 0); }
		public BytedataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bytedata; } }
	}

	[RuleVersion(0)]
	public BytedataContext bytedata() {
		BytedataContext _localctx = new BytedataContext(Context, State);
		EnterRule(_localctx, 24, RULE_bytedata);
		try {
			State = 146;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 143;
				numberdata();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 144;
				id();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 145;
				Match(StringData);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WorddataContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberdataContext numberdata() {
			return GetRuleContext<NumberdataContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public WorddataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_worddata; } }
	}

	[RuleVersion(0)]
	public WorddataContext worddata() {
		WorddataContext _localctx = new WorddataContext(Context, State);
		EnterRule(_localctx, 26, RULE_worddata);
		try {
			State = 150;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 148;
				numberdata();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 149;
				id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberdataContext : ParserRuleContext {
		public IToken decimalnumber;
		public IToken hexnumber;
		public IToken floatnumber;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(BdxScriptParser.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX() { return GetToken(BdxScriptParser.HEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOATNUM() { return GetToken(BdxScriptParser.FLOATNUM, 0); }
		public NumberdataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberdata; } }
	}

	[RuleVersion(0)]
	public NumberdataContext numberdata() {
		NumberdataContext _localctx = new NumberdataContext(Context, State);
		EnterRule(_localctx, 28, RULE_numberdata);
		int _la;
		try {
			State = 156;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 152;
				_localctx.decimalnumber = Match(DEC);
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 2);
				{
				State = 153;
				Match(T__8);
				State = 154;
				_localctx.hexnumber = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEC || _la==HEX) ) {
					_localctx.hexnumber = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case FLOATNUM:
				EnterOuterAlt(_localctx, 3);
				{
				State = 155;
				_localctx.floatnumber = Match(FLOATNUM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HexbodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(BdxScriptParser.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX() { return GetToken(BdxScriptParser.HEX, 0); }
		public HexbodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hexbody; } }
	}

	[RuleVersion(0)]
	public HexbodyContext hexbody() {
		HexbodyContext _localctx = new HexbodyContext(Context, State);
		EnterRule(_localctx, 30, RULE_hexbody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			_la = TokenStream.LA(1);
			if ( !(_la==DEC || _la==HEX) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(BdxScriptParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(BdxScriptParser.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX() { return GetToken(BdxScriptParser.HEX, 0); }
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 32, RULE_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 360448L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncludeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FileName() { return GetToken(BdxScriptParser.FileName, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(BdxScriptParser.NL, 0); }
		public IncludeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_include; } }
	}

	[RuleVersion(0)]
	public IncludeContext include() {
		IncludeContext _localctx = new IncludeContext(Context, State);
		EnterRule(_localctx, 34, RULE_include);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			Match(T__9);
			State = 163;
			Match(FileName);
			State = 164;
			Match(NL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Section_idContext section_id() {
			return GetRuleContext<Section_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(BdxScriptParser.NL, 0); }
		public SectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_section; } }
	}

	[RuleVersion(0)]
	public SectionContext section() {
		SectionContext _localctx = new SectionContext(Context, State);
		EnterRule(_localctx, 36, RULE_section);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			Match(T__10);
			State = 167;
			section_id();
			State = 168;
			Match(NL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Section_idContext : ParserRuleContext {
		public Section_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_section_id; } }
	}

	[RuleVersion(0)]
	public Section_idContext section_id() {
		Section_idContext _localctx = new Section_idContext(Context, State);
		EnterRule(_localctx, 38, RULE_section_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			_la = TokenStream.LA(1);
			if ( !(_la==T__11 || _la==T__12) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,22,173,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,1,0,5,0,42,8,0,10,0,
		12,0,45,9,0,1,0,1,0,5,0,49,8,0,10,0,12,0,52,9,0,5,0,54,8,0,10,0,12,0,57,
		9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,72,8,1,1,2,
		1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,3,4,86,8,4,1,5,1,5,1,5,1,5,
		5,5,92,8,5,10,5,12,5,95,9,5,1,5,1,5,1,6,1,6,1,6,1,6,5,6,103,8,6,10,6,12,
		6,106,9,6,1,6,1,6,1,7,1,7,1,7,3,7,113,8,7,1,7,1,7,1,8,1,8,1,8,3,8,120,
		8,8,1,8,1,8,1,9,1,9,1,9,1,9,5,9,128,8,9,10,9,12,9,131,9,9,3,9,133,8,9,
		1,9,1,9,1,10,1,10,3,10,139,8,10,1,11,1,11,1,11,1,12,1,12,1,12,3,12,147,
		8,12,1,13,1,13,3,13,151,8,13,1,14,1,14,1,14,1,14,3,14,157,8,14,1,15,1,
		15,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,0,
		0,20,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,0,3,1,0,15,
		16,2,0,15,16,18,18,1,0,12,13,176,0,43,1,0,0,0,2,71,1,0,0,0,4,73,1,0,0,
		0,6,75,1,0,0,0,8,85,1,0,0,0,10,87,1,0,0,0,12,98,1,0,0,0,14,109,1,0,0,0,
		16,116,1,0,0,0,18,123,1,0,0,0,20,138,1,0,0,0,22,140,1,0,0,0,24,146,1,0,
		0,0,26,150,1,0,0,0,28,156,1,0,0,0,30,158,1,0,0,0,32,160,1,0,0,0,34,162,
		1,0,0,0,36,166,1,0,0,0,38,170,1,0,0,0,40,42,5,20,0,0,41,40,1,0,0,0,42,
		45,1,0,0,0,43,41,1,0,0,0,43,44,1,0,0,0,44,55,1,0,0,0,45,43,1,0,0,0,46,
		50,3,2,1,0,47,49,5,20,0,0,48,47,1,0,0,0,49,52,1,0,0,0,50,48,1,0,0,0,50,
		51,1,0,0,0,51,54,1,0,0,0,52,50,1,0,0,0,53,46,1,0,0,0,54,57,1,0,0,0,55,
		53,1,0,0,0,55,56,1,0,0,0,56,58,1,0,0,0,57,55,1,0,0,0,58,59,5,0,0,1,59,
		1,1,0,0,0,60,72,3,36,18,0,61,72,3,6,3,0,62,63,3,4,2,0,63,64,5,1,0,0,64,
		65,5,20,0,0,65,72,1,0,0,0,66,67,3,4,2,0,67,68,5,1,0,0,68,69,3,8,4,0,69,
		72,1,0,0,0,70,72,3,8,4,0,71,60,1,0,0,0,71,61,1,0,0,0,71,62,1,0,0,0,71,
		66,1,0,0,0,71,70,1,0,0,0,72,3,1,0,0,0,73,74,3,32,16,0,74,5,1,0,0,0,75,
		76,3,32,16,0,76,77,5,2,0,0,77,78,3,28,14,0,78,7,1,0,0,0,79,86,3,12,6,0,
		80,86,3,14,7,0,81,86,3,10,5,0,82,86,3,16,8,0,83,86,3,18,9,0,84,86,3,34,
		17,0,85,79,1,0,0,0,85,80,1,0,0,0,85,81,1,0,0,0,85,82,1,0,0,0,85,83,1,0,
		0,0,85,84,1,0,0,0,86,9,1,0,0,0,87,88,5,3,0,0,88,93,3,26,13,0,89,90,5,4,
		0,0,90,92,3,26,13,0,91,89,1,0,0,0,92,95,1,0,0,0,93,91,1,0,0,0,93,94,1,
		0,0,0,94,96,1,0,0,0,95,93,1,0,0,0,96,97,5,20,0,0,97,11,1,0,0,0,98,99,5,
		5,0,0,99,104,3,24,12,0,100,101,5,4,0,0,101,103,3,24,12,0,102,100,1,0,0,
		0,103,106,1,0,0,0,104,102,1,0,0,0,104,105,1,0,0,0,105,107,1,0,0,0,106,
		104,1,0,0,0,107,108,5,20,0,0,108,13,1,0,0,0,109,112,5,6,0,0,110,113,3,
		28,14,0,111,113,3,32,16,0,112,110,1,0,0,0,112,111,1,0,0,0,113,114,1,0,
		0,0,114,115,5,20,0,0,115,15,1,0,0,0,116,119,5,7,0,0,117,120,3,28,14,0,
		118,120,3,32,16,0,119,117,1,0,0,0,119,118,1,0,0,0,120,121,1,0,0,0,121,
		122,5,20,0,0,122,17,1,0,0,0,123,132,3,32,16,0,124,129,3,20,10,0,125,126,
		5,4,0,0,126,128,3,20,10,0,127,125,1,0,0,0,128,131,1,0,0,0,129,127,1,0,
		0,0,129,130,1,0,0,0,130,133,1,0,0,0,131,129,1,0,0,0,132,124,1,0,0,0,132,
		133,1,0,0,0,133,134,1,0,0,0,134,135,5,20,0,0,135,19,1,0,0,0,136,139,3,
		28,14,0,137,139,3,32,16,0,138,136,1,0,0,0,138,137,1,0,0,0,139,21,1,0,0,
		0,140,141,5,8,0,0,141,142,3,32,16,0,142,23,1,0,0,0,143,147,3,28,14,0,144,
		147,3,32,16,0,145,147,5,14,0,0,146,143,1,0,0,0,146,144,1,0,0,0,146,145,
		1,0,0,0,147,25,1,0,0,0,148,151,3,28,14,0,149,151,3,32,16,0,150,148,1,0,
		0,0,150,149,1,0,0,0,151,27,1,0,0,0,152,157,5,15,0,0,153,154,5,9,0,0,154,
		157,7,0,0,0,155,157,5,17,0,0,156,152,1,0,0,0,156,153,1,0,0,0,156,155,1,
		0,0,0,157,29,1,0,0,0,158,159,7,0,0,0,159,31,1,0,0,0,160,161,7,1,0,0,161,
		33,1,0,0,0,162,163,5,10,0,0,163,164,5,21,0,0,164,165,5,20,0,0,165,35,1,
		0,0,0,166,167,5,11,0,0,167,168,3,38,19,0,168,169,5,20,0,0,169,37,1,0,0,
		0,170,171,7,2,0,0,171,39,1,0,0,0,15,43,50,55,71,85,93,104,112,119,129,
		132,138,146,150,156
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
