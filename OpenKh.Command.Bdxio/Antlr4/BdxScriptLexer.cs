//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from BdxScript.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class BdxScriptLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, StringData=14, DEC=15, HEX=16, 
		FLOATNUM=17, ID=18, WS=19, NL=20, FileName=21, LINE_COMMENT=22;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "StringData", "DEC", "HEX", "FLOATNUM", 
		"ID", "WS", "NL", "FileName", "LINE_COMMENT"
	};


	public BdxScriptLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public BdxScriptLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "':'", "'equ'", "'dw'", "','", "'db'", "'resb'", "'resw'", "'offset'", 
		"'0x'", "'%include'", "'section'", "'.text'", "'.bss'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "StringData", "DEC", "HEX", "FLOATNUM", "ID", "WS", "NL", 
		"FileName", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BdxScript.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BdxScriptLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,22,196,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,
		5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,
		1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,
		5,13,110,8,13,10,13,12,13,113,9,13,1,13,1,13,1,14,3,14,118,8,14,1,14,4,
		14,121,8,14,11,14,12,14,122,1,15,4,15,126,8,15,11,15,12,15,127,1,16,3,
		16,131,8,16,1,16,5,16,134,8,16,10,16,12,16,137,9,16,1,16,1,16,4,16,141,
		8,16,11,16,12,16,142,1,16,4,16,146,8,16,11,16,12,16,147,1,16,1,16,3,16,
		152,8,16,1,16,4,16,155,8,16,11,16,12,16,156,3,16,159,8,16,1,17,1,17,5,
		17,163,8,17,10,17,12,17,166,9,17,1,18,1,18,1,18,1,18,1,19,3,19,173,8,19,
		1,19,1,19,3,19,177,8,19,1,20,1,20,5,20,181,8,20,10,20,12,20,184,9,20,1,
		20,1,20,1,21,1,21,5,21,190,8,21,10,21,12,21,193,9,21,1,21,1,21,0,0,22,
		1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
		29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,1,0,10,1,0,39,39,2,0,43,
		43,45,45,1,0,48,57,3,0,48,57,65,70,97,102,2,0,69,69,101,101,3,0,65,90,
		95,95,97,122,4,0,48,57,65,90,95,95,97,122,2,0,9,9,32,32,1,0,34,34,2,0,
		10,10,13,13,211,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
		0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
		0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
		1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,
		0,0,43,1,0,0,0,1,45,1,0,0,0,3,47,1,0,0,0,5,51,1,0,0,0,7,54,1,0,0,0,9,56,
		1,0,0,0,11,59,1,0,0,0,13,64,1,0,0,0,15,69,1,0,0,0,17,76,1,0,0,0,19,79,
		1,0,0,0,21,88,1,0,0,0,23,96,1,0,0,0,25,102,1,0,0,0,27,107,1,0,0,0,29,117,
		1,0,0,0,31,125,1,0,0,0,33,158,1,0,0,0,35,160,1,0,0,0,37,167,1,0,0,0,39,
		176,1,0,0,0,41,178,1,0,0,0,43,187,1,0,0,0,45,46,5,58,0,0,46,2,1,0,0,0,
		47,48,5,101,0,0,48,49,5,113,0,0,49,50,5,117,0,0,50,4,1,0,0,0,51,52,5,100,
		0,0,52,53,5,119,0,0,53,6,1,0,0,0,54,55,5,44,0,0,55,8,1,0,0,0,56,57,5,100,
		0,0,57,58,5,98,0,0,58,10,1,0,0,0,59,60,5,114,0,0,60,61,5,101,0,0,61,62,
		5,115,0,0,62,63,5,98,0,0,63,12,1,0,0,0,64,65,5,114,0,0,65,66,5,101,0,0,
		66,67,5,115,0,0,67,68,5,119,0,0,68,14,1,0,0,0,69,70,5,111,0,0,70,71,5,
		102,0,0,71,72,5,102,0,0,72,73,5,115,0,0,73,74,5,101,0,0,74,75,5,116,0,
		0,75,16,1,0,0,0,76,77,5,48,0,0,77,78,5,120,0,0,78,18,1,0,0,0,79,80,5,37,
		0,0,80,81,5,105,0,0,81,82,5,110,0,0,82,83,5,99,0,0,83,84,5,108,0,0,84,
		85,5,117,0,0,85,86,5,100,0,0,86,87,5,101,0,0,87,20,1,0,0,0,88,89,5,115,
		0,0,89,90,5,101,0,0,90,91,5,99,0,0,91,92,5,116,0,0,92,93,5,105,0,0,93,
		94,5,111,0,0,94,95,5,110,0,0,95,22,1,0,0,0,96,97,5,46,0,0,97,98,5,116,
		0,0,98,99,5,101,0,0,99,100,5,120,0,0,100,101,5,116,0,0,101,24,1,0,0,0,
		102,103,5,46,0,0,103,104,5,98,0,0,104,105,5,115,0,0,105,106,5,115,0,0,
		106,26,1,0,0,0,107,111,5,39,0,0,108,110,8,0,0,0,109,108,1,0,0,0,110,113,
		1,0,0,0,111,109,1,0,0,0,111,112,1,0,0,0,112,114,1,0,0,0,113,111,1,0,0,
		0,114,115,5,39,0,0,115,28,1,0,0,0,116,118,7,1,0,0,117,116,1,0,0,0,117,
		118,1,0,0,0,118,120,1,0,0,0,119,121,7,2,0,0,120,119,1,0,0,0,121,122,1,
		0,0,0,122,120,1,0,0,0,122,123,1,0,0,0,123,30,1,0,0,0,124,126,7,3,0,0,125,
		124,1,0,0,0,126,127,1,0,0,0,127,125,1,0,0,0,127,128,1,0,0,0,128,32,1,0,
		0,0,129,131,7,1,0,0,130,129,1,0,0,0,130,131,1,0,0,0,131,135,1,0,0,0,132,
		134,7,2,0,0,133,132,1,0,0,0,134,137,1,0,0,0,135,133,1,0,0,0,135,136,1,
		0,0,0,136,138,1,0,0,0,137,135,1,0,0,0,138,140,5,46,0,0,139,141,7,2,0,0,
		140,139,1,0,0,0,141,142,1,0,0,0,142,140,1,0,0,0,142,143,1,0,0,0,143,159,
		1,0,0,0,144,146,7,2,0,0,145,144,1,0,0,0,146,147,1,0,0,0,147,145,1,0,0,
		0,147,148,1,0,0,0,148,149,1,0,0,0,149,151,7,4,0,0,150,152,7,1,0,0,151,
		150,1,0,0,0,151,152,1,0,0,0,152,154,1,0,0,0,153,155,7,2,0,0,154,153,1,
		0,0,0,155,156,1,0,0,0,156,154,1,0,0,0,156,157,1,0,0,0,157,159,1,0,0,0,
		158,130,1,0,0,0,158,145,1,0,0,0,159,34,1,0,0,0,160,164,7,5,0,0,161,163,
		7,6,0,0,162,161,1,0,0,0,163,166,1,0,0,0,164,162,1,0,0,0,164,165,1,0,0,
		0,165,36,1,0,0,0,166,164,1,0,0,0,167,168,7,7,0,0,168,169,1,0,0,0,169,170,
		6,18,0,0,170,38,1,0,0,0,171,173,5,13,0,0,172,171,1,0,0,0,172,173,1,0,0,
		0,173,174,1,0,0,0,174,177,5,10,0,0,175,177,5,13,0,0,176,172,1,0,0,0,176,
		175,1,0,0,0,177,40,1,0,0,0,178,182,5,34,0,0,179,181,8,8,0,0,180,179,1,
		0,0,0,181,184,1,0,0,0,182,180,1,0,0,0,182,183,1,0,0,0,183,185,1,0,0,0,
		184,182,1,0,0,0,185,186,5,34,0,0,186,42,1,0,0,0,187,191,5,59,0,0,188,190,
		8,9,0,0,189,188,1,0,0,0,190,193,1,0,0,0,191,189,1,0,0,0,191,192,1,0,0,
		0,192,194,1,0,0,0,193,191,1,0,0,0,194,195,6,21,0,0,195,44,1,0,0,0,17,0,
		111,117,122,127,130,135,142,147,151,156,158,164,172,176,182,191,1,6,0,
		0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
